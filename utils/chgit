#!/usr/bin/env zsh
set -u

local cmdname="${0:t:r}"
typeset -a g_status
g_status=(status --short --branch)

find_rc() {
  cmdname="${1:?command name}"

  filepath="$(
  while [[ $PWD != $HOME && ! -f $PWD/.${cmdname}rc ]]; do
    cd ..
    [[ $PWD == $OLDPWD ]] && cd
  done
  echo "${PWD}"
  )/.${cmdname}rc"

  # ~/ にも無いなら生成
  [[ ! -f $filepath ]] && touch $filepath

  echo "${filepath}"
}

execute() {
  case "${1}" in
    \#*)
      print_comment "${1}"
      return 1
      ;;
    %*)
      print_color "${1}" 2
      zsh -ic "eval $(echo "${1#%}")" </dev/tty
      ;;
    *)
      git_status_and_cmd "${1}" pull --ff-only
      result="${?}"
      echo
      return "${result}"
      ;;
  esac
}

error() {
  echo "[!] $1" 1>&2
  exit $2
}

has_git() {
  git -C "$1" rev-parse --git-dir >/dev/null 2>&1
  return $?
}

has_ahead() {
  [[ -n $(git -C $1 $g_status | head -1 | grep -oe "\[.*]$") ]]
}

short_path(){
  file="$(simple "${1}")"
  max="${2}"

  if (($#file <= $max)); then
    echo "${file}"
    return
  fi

  base="${file:t}"
  dir=''
  for s ($(echo ${file:h:gs/\// /})) dir+="${s[1]}/"
  echo "${dir}${base}"
}

simple() {
  echo $@ | sed -e "s|^$HOME|~|g"
}

print_color(){
  echo -e "\e[38;5;${2:-1}m$1\e[00m"
}

simple_color() {
  1=$(printf "%-30s" $(simple $1))
  print_color "${1}" 39
}

print_comment(){
  print_color "skip: ${1#\#}" "${2:-118}"
}

print_git() {
  git_path="${1:-git repository path}"

  # 存在しない
  if [[ ! -d $git_path ]]; then
    print_comment "${git_path}" 220
    return
  fi

  st=$(git -C $git_path -c color.status=always $g_status)
  git_path="$(short_path ${git_path} 30)"
  echo "$(simple_color $git_path) $st"
  [[ -n $(echo $st | sed -e 1d) ]] && echo
}

is_comment(){
  [[ $1 =~ ^# ]]
}

add_rc(){
  #Check duplicate path and add it to rc_file
  if grep -q "^$1" "${rc_file}"; then
    simple "$1 already exists"
  else
    echo $1 >> "${rc_file}"
  fi
}

add_rc_git(){
  for str in ${@}; do
    local git_path="${str:a}"

    #check valid of path
    if ! has_git "${git_path}"; then
      error "$(simple $git_path) is not git repository" 12
    fi

    add_rc "${git_path}"
  done
}

git_status_and_cmd(){
  local git_path="${1}"
  shift
  simple_color "${git_path}"
  git -C "${git_path}" $g_status
  git -C "${git_path}" $@
}

action_add() {
  [[ $# == 0 ]] && error "Please git repository path or cmd" 10
  if [[ $* =~ ^% ]]; then
    add_rc "${*}"
  else
    add_rc_git ${@}
  fi
}

action_push() {
  local count=0
  local push_count=0

  cat "${rc_file}" | while read git_path; do
    if is_comment $git_path; then
      print_comment "${git_path}"
      continue
    fi

    ! has_ahead $git_path && continue
    : $[count+=1]

    git_status_and_cmd "${git_path}" push
    [[ $? == 0 ]] && : $[push_count+=1]
    echo
  done
  echo "$push_count/$count pushed"
}

action_pull() {
  cat "${rc_file}" | while read line; do
    execute "$line"
  done
}

action_edit(){
  "${EDITOR}" "${rc_file}"
}

action_list() {
  cat "${rc_file}" | while read line; do
    case "${line}" in
      \#*) print_comment "${line}" ;;
      %*) echo $(echo "${line}" | sed s/^%//) ;;
      *) print_git "${line}" ;;
    esac
  done
}

action_each(){
  cat "${rc_file}" | grep -v '^[%#]' | while read git_path; do
    simple_color "${git_path}"
    local str="$(git -C "${git_path}" -c color.status=always status --short)"
    # [[ -z $str ]] && continue
    echo -e "${str}"
    git -C "${git_path}" $@
    echo
  done
}

action_only() {
  : "${1:?the only option need <PATTERN>}"
  matched=$(grep "${1}" "$rc_file" | head -1)
  [[ -z $matched ]] && error "not matched: ${1}" 20

  read -k key"?$matched (Y/n)"
  [[ $key != $'\n' ]] && echo
  if [[ ! $key =~ [nN] ]]; then
    execute "$matched"
  fi
}

action_shell(){
  cat "${rc_file}" | grep -v '^[%#]' | peco  | while read git_path; do
    echo "Open ${SHELL} in ${git_path}"
    cd "${git_path}"
    "${SHELL}" -i
  done
}

action_clone() {
  cat "${rc_file}" | while read git_path; do
    if is_comment $git_path || [[ -d $git_path ]]; then
      print_comment "${git_path}"
      continue
    fi

    # echo $git_path
    # TODO: 現状のコンフィグだとリモートレポジトリを保存できない
  done
}

action_help() {
  echo "Usage: ${cmdname} [mode]"
  echo -e "\tdefault subcommand is list"
  echo -e "\tadd PATH or %CMD"
  echo -e "\tpush"
  echo -e "\tpull|update"
  echo -e "\tlist"
  echo -e "\tedit"
  echo -e "\teach"
  echo -e "\tonly PATTERN"
  echo -e "\tshell"
  echo -e "\thelp"
}

action_not_subcommand() {
  error "wrong $mode is not subcommand" 60
}

#Start
local rc_file="$(find_rc "${cmdname}")"

if [[ $rc_file != $HOME/.${cmdname}rc ]]; then
  print_color "[+] Load ${rc_file}" 220
fi

local mode="${1:-list}"
shift 2>/dev/null

case "${mode}" in
  add) action_add "${@}" ;;
  push) action_push ;;
  pull|update) action_pull ;;
  only) action_only "${1}" ;;
  list) action_list ;;
  edit) action_edit ;;
  each) action_each $@ ;;
  shell) action_shell ;;
  # clone) action_clone ;;
  help) action_help ;;
  *) action_not_subcommand ;;
esac

exit 0
