#!/bin/zsh
# login interactiveで実行される

case $OSTYPE in
linux*)  exists_source "$HOME/.zshrc.linux" ;;
darwin*) exists_source "$HOME/.zshrc.darwin" ;;
esac

umask 077

# Prompt
autoload -Uz promptinit
promptinit
setopt prompt_subst   #プロンプト定義で置き換えを使用する

# git functions# {{{
#git リポジトリの状態を表示する
function rprompt-git {
  local name st color brace ahead behind stash
  [[ "$PWD" =~ '/\.git(/.*)?$' ]] && return

  name=`git symbolic-ref --short HEAD 2> /dev/null`
  [[ -z $name ]] && return

  st=`git status --short --branch`
  brace=`echo $st head -1 | grep -oe "\[.*]$"`
  ahead=`echo $st | grep -oe "ahead [0-9]*" | awk '{print $2}'`
  behind=`echo $st | grep -oe "behind [0-9]*" | awk '{print $2}'`
  stash=`git stash list | wc -l | tr -d ' ' | grep -v "^0$"`
  [[ -n $ahead ]] && ahead=" $ahead"
  [[ -n $behind ]] && behind=" $behind"
  [[ -n $stash ]] && stash=" $stash"

  st=`echo $st | sed -e 1d`
  if [[ -z $st ]]; then
    color=%F{green}
  elif [[ -n `echo "$st" | grep "^??"` ]]; then
    color=%F{yellow}
  elif [[ -n `echo "$st" | grep '^.M'` ]]; then
    color=%F{red}
  else
    color=%F{red}
  fi

  echo "[$color$name%f%b%F{green}$ahead%f%F{red}$behind%f%F{yellow}$stash%f]"
}

function prompt-return-value {
  echo "%(?,,%F{red} %?%f)"
}

function prompt-ssh {
  if [[ -n "${REMOTEHOST:-}${SSH_CONNECTION:-}" ]]; then
    echo "%F{magenta}($HOST)%f"
  fi
}
# }}}

export PROMPT="%B%F{cyan}%(4~|...|)%3~%b%F{white} %# %f%k"
export RPROMPT='$(prompt-return-value) $(rprompt-git)$(prompt-ssh)'

# Historyh
setopt sharehistory hist_ignore_space
setopt no_hist_reduce_blanks
setopt no_hist_ignore_all_dups  #過去の履歴と重複しても削除しない
setopt extended_history         #履歴に時刻を刻む
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh/zsh_history

# Use emacs keybindings even if our EDITOR is set to vi
# -v にするとすごい笑える
bindkey -e

exists_source $HOME/.zsh.antigen      #after of autoload and before compinit
# Use modern completion system
autoload -U compinit

compinit
exists_source $HOME/.zsh.completion   #requrie after compinit

DIRSTACKSIZE=100
setopt auto_pushd

setopt auto_cd
setopt no_beep no_list_beep
setopt auto_list                  #補完リスト有効
setopt list_packed                #補完リストをなるべく少ない量に
setopt pushd_to_home              #pushdを引数無しで実行した時ホームに移動する
setopt interactive_comments       #コマンドラインでもコメントを使えるようにする
unsetopt transient_rprompt        #コマンド実行時にRPROMPTを
setopt auto_resume                #サスペンド中のコマンドと同じものを実行したらリジュームする
setopt extended_glob              #拡張グロッビング ~ で否定が使える
setopt always_last_prompt         #補完で行を移動しない
setopt no_dot_glob
setopt brace_ccl
setopt zle
setopt no_correct no_correct_all  #コマンド実行時のスペルチェック無効
setopt no_flow_control            # C-s, C-qを無効にする。
setopt clobber                    # リダイレクトで上書きする事を許可
setopt no_tify                    #バックグラウンドジョブが終了したら知らせる
setopt rm_star_silent             #rm *の警告を無効にする

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' menu select=2    #補完候補を色付けする
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*' use-cache yes

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# 別セッションのディレクトリに移動
# 説明表示 cddのだけはonにしてもいいかも
# zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'
source $HOME/.antigen/repos/*cdd.git/cdd
typeset -ga chpwd_functions
chpwd_functions+=_cdd_chpwd

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line

# keymap
bindkey "^[[Z" reverse-menu-complete

exists_source $HOME/.zsh.functions
exists_source $HOME/.zsh.aliases

export BEFORE_DIR=$PWD
function precmd {
  [[ -n $BEFORE_DIR ]] && [[ $BEFORE_DIR != $PWD ]] && ls
  BEFORE_DIR=$PWD
}

# load temproray config
exists_source $HOME/.zshrc.local
