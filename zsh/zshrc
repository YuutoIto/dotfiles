#!/usr/bin/env zsh
# login interactiveで実行される

if [[ -z $TMUX && -n ${REMOTEHOST:-}${SSH_CONNECTION:-} ]]; then
  in_path tmux && exec tmux
fi


case "${OSTYPE:-}" in
linux*)  source "$ZSH_DOT_DIR/zshrc.linux" ;;
darwin*) source "$ZSH_DOT_DIR/zshrc.darwin" ;;
esac

LC_COLLATE=C # Don't move to zshenv.
DIRSTACKSIZE=100
fpath+=($ZSH_DOT_DIR/f)
disable r # zsh-builtin: 直前のコマンドを実効する
# autoload -Uz add-zsh-hook # NOTE: call by zplug
autoload -Uz zmv

# 仮想端末でコマンドを実行(パスワードの自動入力とか ダメ絶対)
# zmodload zsh/zpty

eval "$(dircolors -b)"
LS_COLORS=$(echo "$LS_COLORS" | sed 's/ln=..;../ln=03;94/g')
# autoload -U colors && colors  # NOTE: call by zplug

#Prompt # {{{
autoload -Uz promptinit && promptinit
setopt prompt_subst         # プロンプト定義で置き換えを使用する
setopt prompt_cr            # show prompt in new line, when after command finish.
setopt no_transient_rprompt # on: remove old rprompt when after execute a command.

# aliasなどの影響を受けない
autoload -Uz rprompt-git

prompt-return-value(){
  echo " %(?,,%F{197} %?%f)"
}

in-ssh(){
  [[ -n "${REMOTEHOST:-}${SSH_CONNECTION:-}" ]]
}

PROMPT_SSH_COLOR=220
prompt-ssh() {
  in-ssh && echo " %F{$PROMPT_SSH_COLOR}($HOST)%f"
}

# vimなど特定のbgコマンドを表示する
rprompt-bg() {
  local bg_cmds names
  bg_cmds=$(ps -o comm -T)
  names=$(echo "$bg_cmds" | grep -Eo "vim")

  if [[ -n $names ]]; then
    out=$(echo $names | head -1)
    echo " [%F{99}$out%f]"
  fi
}

prompt-color(){
  if (($UID == 0)); then
    echo 249
  elif in-ssh; then
    echo $PROMPT_SSH_COLOR
  else
    echo 198
  fi
}

prompt-symb-color(){
  if (( $UID == 0)); then
    echo 160
  else
    echo 255
  fi
}

export PROMPT='%F{$(prompt-color)}%(6~|...|)%5~%F{$(prompt-symb-color)} %# %f'
export RPROMPT='$(prompt-return-value)$(rprompt-bg)$(rprompt-git)$(prompt-ssh)'
# }}}

#History # {{{
setopt share_history
setopt inc_append_history       #on: 履歴を即座に書き込む
setopt extended_history         #on: 履歴に時を刻む
setopt hist_no_store            #on: not add history-command to history.
setopt hist_no_functions        #on: remove functon definitions from the history list.
setopt hist_reduce_blanks       #on: reduce unnecessary blanks
setopt hist_ignore_space        #on: not add to the history if first character of the command is space.
setopt hist_ignore_dups
setopt hist_ignore_all_dups     #on: 過去の履歴と重複しても削除しない
setopt no_hist_verify           #on: history-commandを直接実行せず、まず展開する
SAVEHIST=100000 #file
HISTSIZE=20000  #memory
HISTFILE=~/.zsh/history
# }}}

#setopt {{{
setopt local_options          #on: 関数終了時に全てのオプションを復元する
setopt no_beep no_list_beep no_hist_beep
setopt autocd
setopt auto_pushd
setopt pushd_to_home          #pushdを引数無しで実行した時ホームに移動する
setopt pushd_silent
setopt interactive_comments   # can use comment
setopt noequals               # Enable "=command" feature
setopt no_flow_control    # C-s, C-qを無効にする。
setopt clobber            # リダイレクトで上書きする事を許可
setopt rm_star_silent     # rm *の警告を無効にする
setopt ZLE                #use zsh line editor
# setopt cdablevars             #on: if arguments of cd is not directory, expand as variable.

#jobs
setopt auto_resume            # background jobをそのコマンド名で再開する(リダイレクト時不可)
setopt notify                 # background jobが終了したらプロンプトの表示を待たずに知らせる
setopt check_jobs             # report the background  and suspendedjobs before exit.
setopt long_list_jobs         # jobs -l

#glob
setopt extended_glob
setopt brace_ccl          # {a-c}をa b cに展開する
setopt no_dot_glob
setopt mark_dirs              # Add "/" when glob.
# setopt nonomatch          #off: マッチしなかったときエラーにせずただの文字列として扱う
# setopt numeric_glob_sort  #数値が含まれたとき数字順にソートする

#complete
setopt always_lastprompt  #補完で行を移動しない
setopt list_types         # List like "ls -F"
setopt list_packed        # 補完リストをなるべく少ない量にする
setopt auto_param_keys    #自動補完される余分なカンマなどを適宜削除してスムーズに入力できるようにする
setopt auto_param_slash   #ディレクトリ名の補完で末尾の/を自動的に付加し、次の補完に備える
setopt auto_remove_slash  #スラッシュが補完された後、;やスペースを入力したら自動的にそのスラッシュを消す
setopt magic_equal_subst  # --prefix=/usr/など = 以降も補完

setopt list_rows_first    # 候補を移動するとき横に進む
setopt no_list_ambiguous  #on: 共通部分を補完してリストは表示しない

# auto_list auto_menu bash_auto_list glob_complete hash_list_all list_ambiguous menu_complete rec_exact
# setopt auto_menu          # TABで候補を選択できるメニュー(2type必要)
# setopt auto_list          # 補完候補一覧をPAGER的なもので表示する
# setopt no_menu_complete   #

# }}}

#zgen # {{{
zgen_path="$HOME/.zgen"
if [[ ! -e ${zgen_path:-} ]]; then
  local key
  if read -q key'?install zgen?(y/N) '; then
    echo
    git clone https://github.com/tarjoilija/zgen.git "${zgen_path}"
  fi
  unset key
fi

if [[ -d ${zgen_path:-} ]]; then
  source "${zgen_path}/zgen.zsh"
  if ! zgen saved; then
    zgen load m4i/cdd
    # zgen load junegunn/fzf      # command
    # zgen load Russell91/sshrc   # command
    # zgen load philovivero/distribution # command

    zgen load mollifier/zload # reload zsh completion function.
    # zgen load b4b4r07/auto-fu.zsh
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load zsh-users/zsh-completions src

    zgen oh-my-zsh plugins/gem
    zgen oh-my-zsh plugins/docker
    zgen save
  fi
  source $HOME/.zgen/m4i/cdd-master/cdd
  # source $HOME/.zgen/tcnksm/docker-alias-master/zshrc
fi
unset zgen_path
# }}}

#zplug # {{{
# zplug_path="$HOME/.zplug"
if [[ ! -d ${zplug_path:-.} ]]; then

  if read -q key'?install zplug?(y/N) '; then
    echo; git clone https://github.com/b4b4r07/zplug.git "${zplug_path}"
  fi
  unset key
fi

if [[ -d ${zplug_path:-} ]]; then
  export ZPLUG_LOADFILE="$ZSH_DOT_DIR/zplug.zsh"
  source "${zplug_path}/init.zsh"

  zplug check --verbose
  zplug load # TODO: Call compinit again.

  alias zplug-clear='zplug clean; zplug clear; rm ~/.{,zplug/}zcompdump'
  in_path k && alias k='k -Ah'
  in_path distribution && alias distribution='distribution --color'
fi
unset zplug_path
# }}}

# NOTE: call by zplug one time.
#zsh completion system
# autoload -U compinit

# -u disable security check.
# compinit -u

# compdef _cdd cdd # NOTE: call by zplug.

#requrie after compinit
source "$ZSH_DOT_DIR/zsh.completion"

can_exec _cdd_chpwd && add-zsh-hook chpwd _cdd_chpwd

# title
title-cmd(){ title "${1}" }
title-dir(){ title "${PWD}" }
add-zsh-hook preexec title-cmd
add-zsh-hook chpwd title-dir

# cdr # {{{
autoload -Uz chpwd_recent_dirs cdr
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-pushd true
zstyle ':chpwd:*' recent-dirs-file "$HOME/.zsh/chpwd-recent-dirs"
zstyle ':completion:*:*:cdr:*' menu select
# }}}

# highlighting # {{{
# ZSH_HIGHLIGHT_STYLES[default]='none'
# ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=red,bold'
# ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=yellow'
# ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=green,underline'
# ZSH_HIGHLIGHT_STYLES[precommand]='fg=green,underline'
# ZSH_HIGHLIGHT_STYLES[commandseparator]='none'
ZSH_HIGHLIGHT_STYLES[path]='fg=85'
# ZSH_HIGHLIGHT_STYLES[path_pathseparator]=''
# ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=''
ZSH_HIGHLIGHT_STYLES[globbing]='fg=51'
# ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=blue'
# ZSH_HIGHLIGHT_STYLES[single-hyphen-option]:=none
# ZSH_HIGHLIGHT_STYLES[double-hyphen-option]:=none
# ZSH_HIGHLIGHT_STYLES[assign]:=none
# ZSH_HIGHLIGHT_STYLES[redirection]:=none
# ZSH_HIGHLIGHT_STYLES[comment]:=fg=black,bold
# ZSH_HIGHLIGHT_STYLES[arg0]:=fg=green

ZSH_HIGHLIGHT_STYLES[back-quoted-argument]='fg=green'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=87'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=154'
# ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]='fg=214'
# ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]='fg=cyan'
# ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]='fg=cyan'

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_PATTERNS+=('rm -r *' 'fg=white,bold,bg=red')
# }}}

source "$ZSH_DOT_DIR/zsh.functions"
source "$ZSH_DOT_DIR/zsh.aliases"

#zstyle completion {{{
# zstyle ':completion:*:*:CMD:*:TAG' STYLE
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose true
zstyle ':completion:*:options' verbose true
zstyle ':completion:*:values' verbose true
zstyle ':completion:*' menu select=1 # 現在の補完候補をハイライト
zstyle ':completion:*' list-separator '~~>'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%S%F{197}   Hey Hey! %p   %f%s'
zstyle ':completion:*' select-prompt '%S%F{208}  ε=ε=ε=ε=＼(;´□ `)/ %p  %f%s'
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'

zstyle ':completion:*:descriptions' format '%F{43}%d%f'
zstyle ':completion:*:messages'     format '%F{227}%d%f'
zstyle ':completion:*:warnings'     format '%F{red}Sorry, no matches for%f: %d'

#kill 番号色付き nolist interactive
zstyle ':completion:*:*:kill:*' list-colors '=(#b) #([0-9]#)*=0=38;05;162'
zstyle ':completion:*:*:kill:*' menu true interactive
zstyle ':completion:*:*:kill:*' command 'ps --no-headers -u "${USER}" -o pid,%cpu,tty,cputime,cmd'

zstyle ':completion:*:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters   # complete array index.

# setopt noautolist
setopt no_menu_complete
setopt autolist
setopt automenu
# }}}

#bindkey # {{{
bindkey -e
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -r "^T"

# emacs bind # {{{
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^F" forward-char
bindkey "^B" backward-char
bindkey "^D" delete-char
bindkey "^H" backward-delete-char
bindkey "^W" backward-kill-word
bindkey "^K" kill-line
bindkey "^U" backward-kill-line
bindkey "^N" down-line-or-history
bindkey "^P" up-line-or-history
# }}}

bindkey "^L" clear-screen
bindkey "^M" accept-line
bindkey "^J" accept-line
bindkey "^G" send-break
bindkey "^Q" push-line
bindkey "^V" quoted-insert

bindkey "^I" expand-or-complete
bindkey "^O" accept-line-and-down-history
bindkey "^Y" yank
bindkey "^]" insert-last-word

# \ -
bindkey "^_" undo
# insert
bindkey "[2~" overwrite-mode
# delete
bindkey "[3~" delete-char
# backspace
bindkey "^?" backward-delete-char

# <S-Tab>
bindkey "[Z" reverse-menu-complete

bindkey "^X^X" edit-command-line

# cursor-key and other # {{{
bindkey "[A" up-line-or-history
bindkey "[B" down-line-or-history
bindkey "[C" forward-char
bindkey "[D" backward-char
bindkey "[H" beginning-of-line
bindkey "[F" end-of-line
bindkey "OA" up-line-or-history
bindkey "OB" down-line-or-history
bindkey "OC" forward-char
bindkey "OD" backward-char
bindkey "OH" beginning-of-line
bindkey "OF" end-of-line
# }}}

# alt-bind # {{{
bindkey "b" backward-word
bindkey "f" forward-word
bindkey "n" history-search-forward
bindkey "p" history-search-backward

bindkey "w" kill-word
bindkey "q" push-line
bindkey "h" run-help
# }}}

  ## original keybind functions # {{{
  zle_filter_history(){
    zle reset-prompt
    local cmd="$(history -nr 0 | peco --query "${LBUFFER}")"

    if [[ -n $cmd ]]; then
      BUFFER="${cmd}"
      CURSOR=$#BUFFER
    fi
  }
  zle -N zle_filter_history
  in_path peco && bindkey '' zle_filter_history

  zle_filter_cdr(){
    zle reset-prompt
    local dir="$(cdr -l | sed 's/^[^ ]\+ \+//' | peco --query "${LBUFFER}")"

    if [[ -n $dir ]]; then
      BUFFER="cd ${dir}"
      zle accept-line
    fi
  }
  zle -N zle_filter_cdr
  in_path peco && bindkey '' zle_filter_cdr

  zle_filter_select_file(){
    zle reset-prompt
    local -a array
    array+=${(z)LBUFFER}
    shift array

    local dir file file_path
    dir="${$(relative "$array[-1]"):-.}"
    file="$(cd "$dir" &>/dev/null && find -type d -name .git -prune -o -type f 2>/dev/null | sed 's|^\./||' | sort | peco)"
    file_path="$(relative "$dir/$file")"

    if [[ -n $file ]]; then
      BUFFER="${BUFFER%"$array[-1]"}$file_path"
      CURSOR=${#BUFFER}
    fi
  }
  zle -N zle_filter_select_file
  bindkey '' zle_filter_select_file

  # TODO ディレクトリの浅さでソート
  zle_filter_open_file(){
    zle reset-prompt
    # zleで呼ばれるとhookが呼ばれる
    file="$({filter_select_file})"
    if [[ -n $file ]]; then
      BUFFER="${EDITOR} '${file}'"
      CURSOR=${#BUFFER}
      zle accept-line
    fi
  }
  zle -N zle_filter_open_file
  # Ctrl /
  bindkey '' zle_filter_open_file

  zle_git_hash(){
    BUFFER="${BUFFER} $(git log --oneline --branches | peco | awk '{print $1}')"
    CURSOR=${#BUFFER}
  }
  zle -N zle_git_hash
  bindkey 'g' zle_git_hash

  zle_play_music(){
    zle reset-prompt
    play-music </dev/tty
  }
  zle -N zle_play_music
  bindkey 'm' zle_play_music
  bindkey '' zle_play_music

  zle_filter_commands(){
    BUFFER="$(hash -L | awk -F'[= ]' '{print $2}' | peco --initial-filter=Fuzzy)"
    CURSOR=${#BUFFER}
  }
  zle -N zle_filter_commands
  bindkey 'c' zle_filter_commands
  # bindkey '' zle_filter_commands # don't work

  zle_filter_cd(){
    local str=' '
    while [[ -n $str && $str != '.' ]]; do
      str="$(find -maxdepth 1 -type d | sed 's|^./||'| peco)"
      cd "${str}"
    done
    BUFFER="cd $(pwd)"
    zle accept-line
  }
  zle -N zle_filter_cd
  bindkey 'd' zle_filter_cd
  # bindkey '' zle_filter_cd # don't work

  zle_pry(){
    BUFFER=pry
    zle accept-line
  }
  zle -N zle_pry
  bindkey 'p' zle_pry
  bindkey '' zle_pry

  zle_clip(){
    echo -nE "${BUFFER}" | clip
  }
  zle -N zle_clip
  bindkey 'y' zle_clip

  # }}}
# }}}

can_exec zprof && zprof

#Load local config
exists_source "$ZSH_DOT_DIR/zshrc.local"
