#!/usr/bin/env zsh
# login interactiveで実行される

case $OSTYPE in
linux*)  exists_source "$HOME/.zshrc.linux" ;;
darwin*) exists_source "$HOME/.zshrc.darwin" ;;
esac

umask 077
DIRSTACKSIZE=100
disable r # zsh-builtin: 直前のコマンドを実効する
autoload -Uz add-zsh-hook
autoload -Uz zmv

eval "$(dircolors -b)"
LS_COLORS=$(echo "$LS_COLORS" | sed 's/ln=01;36/ln=03;34/g')
autoload -U colors && colors

#Prompt # {{{
autoload -Uz promptinit && promptinit
setopt prompt_subst         # プロンプト定義で置き換えを使用する
setopt prompt_cr            # show prompt in new line, when after command finish.
setopt no_transient_rprompt # on: remove old rprompt when after execute a command.

rprompt-git() {
  git rev-parse --git-dir >&! /dev/null || return

  # branch name
  local name state color
  name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  state=$(git status --short | awk '{print $1}')
  if [[ $state =~ U ]]; then
    color=165 #magenta
  elif [[ $state =~ '\?' ]]; then
    color=208 #yellow
  elif [[ -z $state ]]; then
    color=36 #green
  else
    color=196 #red
  fi

  # branch status
  local brace ahead behind stash
  brace=$(git status --short --branch | head -1 | grep -oe '\[.*]$')
  ahead=$(echo "${brace}" | grep -oe 'ahead [0-9]\+' | awk '{print $2}')
  behind=$(echo "${brace}" | grep -oe 'behind [0-9]\+' | awk '{print $2}')
  stash=$(git stash list | wc -l | sed -e 's/^0$//g')
  [[ -n $ahead ]] && ahead=" %F{36}$ahead%f"
  [[ -n $behind ]] && behind=" %F{196}$behind%f"
  [[ -n $stash ]] && stash=" %F{208}$stash%f"

  echo " [%F{$color}$name%f${ahead}${behind}${stash}]"
}

prompt-return-value() {
  echo " %(?,,%F{196} %?%f)"
}

prompt-ssh() {
  if [[ -n "${REMOTEHOST:-}${SSH_CONNECTION:-}" ]]; then
    echo " %F{37}($HOST)%f"
  fi
}

# vimなど特定のbgコマンドを表示する
rprompt-bg() {
  local bg_cmds names
  bg_cmds=$(ps -o comm -T)
  names=$(echo "$bg_cmds" | grep -Eo "vim")

  if [[ -n $names ]]; then
    out=$(echo $names | head -1)
    echo " [%F{99}$out%f]"
  fi
}

export PROMPT='%F{37}%(6~|...|)%5~%F{255} %# %f'
export RPROMPT='$(prompt-return-value)$(rprompt-bg)$(rprompt-git)$(prompt-ssh)'
# }}}

#History # {{{
setopt share_history
setopt inc_append_history       #on: 履歴を即座に書き込む
setopt extended_history         #on: 履歴に時を刻む
setopt hist_no_store            #on: not add history-command to history.
setopt hist_no_functions        #on: remove functon definitions from the history list.
setopt hist_reduce_blanks       #on: reduce unnecessary blanks
setopt hist_ignore_space        #on: not add to the history if first character of the command is space.
setopt hist_ignore_dups
setopt no_hist_ignore_all_dups  #on: 過去の履歴と重複しても削除しない
setopt no_hist_verify           #on: history-commandを直接実行せず、まず展開する
SAVEHIST=100000 #file
HISTSIZE=20000  #memory
HISTFILE=~/.zsh/history
# }}}

#setopt {{{
setopt local_options          #on: 関数終了時に全てのオプションを復元する
setopt no_beep no_list_beep no_hist_beep
setopt autocd
setopt noauto_pushd
setopt pushd_to_home          #pushdを引数無しで実行した時ホームに移動する
setopt pushd_silent
setopt interactive_comments   # can use comment
setopt equals                 # Enable "=command" feature
setopt no_flow_control    # C-s, C-qを無効にする。
setopt clobber            # リダイレクトで上書きする事を許可
setopt rm_star_silent     # rm *の警告を無効にする
setopt ZLE                #use zsh line editor
# setopt cdablevars             #on: if arguments of cd is not directory, expand as variable.

#jobs
setopt auto_resume            # background jobをそのコマンド名で再開する(リダイレクト時不可)
setopt notify                 # background jobが終了したらプロンプトの表示を待たずに知らせる
setopt check_jobs             # report the background  and suspendedjobs before exit.
setopt long_list_jobs

#glob
setopt extended_glob
setopt brace_ccl          # {a-c}をa b cに展開する
setopt no_dot_glob
setopt mark_dirs              # Add "/" when glob.
# setopt nonomatch          #off: マッチしなかったときエラーにせずただの文字列として扱う
# setopt numeric_glob_sort  #数値が含まれたとき数字順にソートする

#complete
setopt always_lastprompt  #補完で行を移動しない
setopt list_types         # List like "ls -F"
setopt list_packed        # 補完リストをなるべく少ない量にする
setopt auto_param_keys    #自動補完される余分なカンマなどを適宜削除してスムーズに入力できるようにする
setopt auto_param_slash   #ディレクトリ名の補完で末尾の/を自動的に付加し、次の補完に備える
setopt auto_remove_slash  #スラッシュが補完された後、;やスペースを入力したら自動的にそのスラッシュを消す

setopt list_rows_first    # 候補を移動するとき横に進む
setopt no_list_ambiguous  #on: 共通部分を補完してリストは表示しない

# auto_list auto_menu bash_auto_list glob_complete hash_list_all list_ambiguous menu_complete rec_exact
# setopt auto_menu          # TABで候補を選択できるメニュー(2type必要)
# setopt auto_list          # 補完候補一覧をPAGER的なもので表示する
# setopt no_menu_complete   #

# }}}

#antigen # {{{
antigen_path="$HOME/.zsh/antigen/antigen.zsh"
if [[ ! -f $antigen_path ]]; then
  echo -n "antigen install?(y/N) "
  read -k 1 key
  if [[ $key =~ [yY] ]]; then
    git clone https://github.com/zsh-users/antigen.git .zsh/antigen
  fi
  unset key
fi

if [[ -f $antigen_path ]]; then
  source $HOME/.zsh/antigen/antigen.zsh
  # antigen bundle tarruda/zsh-autosuggestions
  # antigen bundle hchbaw/auto-fu.zsh && zle-line-init(){ auto-fu-init } # interactive completion
  antigen bundle zsh-users/zsh-syntax-highlighting
  antigen bundle m4i/cdd
  antigen bundle rimraf/k && alias k='k -Ah'
  antigen bundle mollifier/anyframe
  antigen bundle zsh-users/zaw
  antigen apply
fi
unset antigen_path
# }}}

#zsh completion system
autoload -U compinit

#require before compinit
antigen bundle zsh-users/zsh-completions

# -u disable security check.
compinit -u

#requrie after compinit
exists_source $HOME/.zsh.completion

source $HOME/.antigen/repos/*cdd.git/cdd
add-zsh-hook chpwd _cdd_chpwd

# cdr # {{{
autoload -Uz chpwd_recent_dirs cdr
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-pushd true
zstyle ':chpwd:*' recent-dirs-file "$HOME/.zsh/chpwd-recent-dirs"
zstyle ':completion:*:*:cdr:*' menu select
# }}}

exists_source $HOME/.zsh.functions
exists_source $HOME/.zsh.aliases

add-zsh-hook precmd autols
add-zsh-hook precmd ud-add

#zstyle completion {{{
# zstyle ':completion:*:*:CMD:*:TAG' STYLE
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose true
zstyle ':completion:*:options' verbose true
zstyle ':completion:*:values' verbose true
zstyle ':completion:*' menu select=1 # 現在の補完候補をハイライト
zstyle ':completion:*' list-separator '~~>'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%S%F{197}   Hey Hey! %p   %f%s'
zstyle ':completion:*' select-prompt '%S%F{208}  ε=ε=ε=ε=＼(;´□ `)/ %p  %f%s'
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'

zstyle ':completion:*:descriptions' format '%F{43}%d%f'
zstyle ':completion:*:messages'     format '%F{227}%d%f'
zstyle ':completion:*:warnings'     format '%F{red}Sorry, no matches for%f: %d'

#kill 番号色付き nolist interactive
zstyle ':completion:*:*:kill:*' list-colors '=(#b) #([0-9]#)*=0=38;05;162'
zstyle ':completion:*:*:kill:*' menu true interactive
zstyle ':completion:*:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

zstyle ':completion:*:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters   # complete array index.

# setopt noautolist
setopt no_menu_complete
setopt autolist
setopt automenu
# }}}

#bindkey # {{{
bindkey -e
autoload -Uz edit-command-line
zle -N edit-command-line

# emacs bind # {{{
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^F" forward-char
bindkey "^B" backward-char
bindkey "^D" delete-char
bindkey "^H" backward-delete-char
bindkey "^W" backward-kill-word
bindkey "^K" kill-line
bindkey "^U" backward-kill-line
bindkey "^N" down-line-or-history
bindkey "^P" up-line-or-history
# }}}

bindkey "^L" clear-screen
bindkey "^M" accept-line
bindkey "^G" send-break
bindkey "^Q" push-line
bindkey "^V" quoted-insert

bindkey "^I" expand-or-complete
bindkey "^O" accept-line-and-down-history
bindkey "^T" transpose-chars
bindkey "^Y" yank
bindkey "^]" insert-last-word

# \ -
bindkey "^_" undo
# insert
bindkey "^[[2~" overwrite-mode
# delete
bindkey "^[[3~" delete-char
# backspace
bindkey "^?" backward-delete-char

# <S-Tab>
bindkey "^[[Z" reverse-menu-complete

# zaw
bindkey "^X^X" zaw

# cursor-key and other # {{{
bindkey "^[[A" up-line-or-history
bindkey "^[[B" down-line-or-history
bindkey "^[[C" forward-char
bindkey "^[[D" backward-char
bindkey "^[OA" up-line-or-history
bindkey "^[OB" down-line-or-history
bindkey "^[OC" forward-char
bindkey "^[OD" backward-char
bindkey "^[OH" beginning-of-line
bindkey "^[OF" end-of-line
# }}}

# alt-bind # {{{
bindkey "^[b" backward-word
bindkey "^[f" forward-word
bindkey "^[n" history-search-forward
bindkey "^[p" history-search-backward

bindkey "^[w" kill-word
bindkey "^[q" push-line
bindkey "^[e" edit-command-line
bindkey "^[h" run-help
# }}}

  ## original keybind functions # {{{
  zle_percol_history(){
    zle reset-prompt
    local cmd="$(history -nr 0 | awk '!a[$0]++' | percol --match-method=regex --query "$LBUFFER")"

    if [[ -n $cmd ]]; then
      BUFFER="$cmd"
      zle accept-line
    fi
  }
  zle -N zle_percol_history
  bindkey '^R' zle_percol_history

  zle_percol_cdr(){
    zle reset-prompt
    local dir=$(cdr -l | sed 's/^[^ ]\+ \+//' | percol --match-method=regex --query "$LBUFFER")

    if [[ -n $dir ]]; then
      BUFFER="cd $dir"
      zle accept-line
    fi
  }
  zle -N zle_percol_cdr
  bindkey '^S' zle_percol_cdr

  zle_percol_select_file(){
    zle reset-prompt
    local -a array
    array+=${(z)LBUFFER}
    shift array

    local dir file file_path
    dir="${$(relative "$array[-1]"):-.}"
    file="$(cd "$dir" && find . -type f 2>/dev/null | percol --match-method=regex)"
    file_path="$(relative "$dir/$file")"

    if [[ -n $file ]]; then
      BUFFER="${BUFFER%"$array[-1]"}$file_path"
      CURSOR=${#BUFFER}
    fi
  }
  zle -N zle_percol_select_file
  bindkey '^O' zle_percol_select_file

  zle_play_music(){
    zle reset-prompt
    play-music </dev/tty
  }
  zle -N zle_play_music
  bindkey '^Xm' zle_play_music

  zle_pry(){
    BUFFER=pry
    zle accept-line
  }
  zle -N zle_pry
  bindkey 'p' zle_pry

  zle_todo(){
    BUFFER='memo todo'
    zle accept-line
  }
  zle -N zle_todo
  bindkey 't' zle_todo

  zle_memo(){
    zle push-line
    BUFFER='memo '
    CURSOR=${#BUFFER}
  }
  zle -N zle_memo
  bindkey 'm' zle_memo

  zle_clip(){
    echo -n "${BUFFER}" | clip
  }
  zle -N zle_clip
  bindkey 'y' zle_clip

  # }}}
# }}}

#Load local config
exists_source $HOME/.zshrc.local
