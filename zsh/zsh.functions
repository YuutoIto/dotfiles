#!/usr/bin/env zsh -eu

function gor {
  while [ ! -f Gemfile ] && [[ $PWD != '/' ]]; do
    cd ..
  done
}

function ch {
	if [ $# -eq 0 ]; then
		cd $HOME
	else
		cd $HOME/$1
	fi
}

function mcdir {
  mkdir $@
  cd "${@:$#}"
}

function rbenv-upgrade { # {{{
  local rbenv_dir i
  local -a plugin_dirs

  rbenv_dir=`find $HOME/ -name \.rbenv 2> /dev/null`
  if [[ -z $rbenv_dir ]]; then
    echo "rbenv not found" 1>&2
    return
  fi
  echo "enter $rbenv_dir"
  pushd $rbenv_dir > /dev/null
  echo "git pull"
  git pull

  echo "\nenter $rbenv_dir/plugins"
  cd plugins > /dev/null
  plugin_dirs=(`find ./ -name .git`)

  for i in $plugin_dirs; do
    i=`dirname $i`
    cmd="git -C $i pull"
    echo "\n$cmd"
    git -C $i pull
  done

  popd > /dev/null
} # }}}

function binfo {
  where $1
  $1 --version
}

#color {{{
function colors {
  local c
  echo
  for c in {000..255}; do
    echo -n "\e[38;5;${c}m $c"
    [ $(($c%16)) -eq 15 ] && echo
  done
  echo
}

function colorsv {
  local c
  echo
  for c in {016..255}; do
    echo -n "\e[38;5;${c}m $c"
    [ $(($((c-16))%6)) -eq 5 ] && echo
  done
  echo
}
# }}}

function sln {
  local sour targ
  if [[ $# < 2 ]]; then
    echo "usage: sln source target"
    return 1
  else
    sour=`realpath -s $1`
    targ=`realpath -s $2`
    ln -svi $sour $targ
  fi
}

function binln {
  for name in $@; do
    sln $name $HOME/bin/${name%.*}
  done
}

#rc commands {{{
function generic_rc {
  set -u
  : $1
  local dir="$1"
  shift
  case $# in
    0) vi $dir ;;
    *)
      case $1 in
        '-d' | '--dir' )  echo $dir ;;
        '-l' | '--list' ) ls $dir ;;
        '-c' | '--cd' )   cd $dir ;;
        '-g' | '--git' )
          shift
          if [[ $# -eq 0 ]]; then
            git -C $dir sh
          else
            git -C $dir $@
          fi
          ;;
        * )
          if [ -e $dir/$1 ]; then
            vi $dir/$1
          else
            echo "$1 is not exists" >&2
          fi
      esac
      ;;
  esac
}

function vimrc {
  generic_rc $HOME/.vim/ $@
}

function zshrc {
  generic_rc $HOME/.dotfiles/zsh/ $@
}
# }}}

function dotgit { git -C ~/.dotfiles ${1:-sh} }
function vimgit { git -C ~/.vim ${1:-sh} }
function dcho { eval "echo \$$1" }
function edigo { vi $1 && $2 $1 }

function +r { chmod +r $1 }
function -r { chmod -r $1 }
function +w { chmod +w $1 }
function -w { chmod -w $1 }
function +x { chmod +x $1 }
function -x { chmod -x $1 }

function ermdir {
  if [[ $# -ne 1 ]]; then
    echo "usage: ermdir DIR" >&2
    return 1
  fi

  rmdir -p $1/**/ 2> /dev/null
}

function pull-these {
  for i in `ls -F | grep '/$'`; do
    printf "%-20s" $i
    git -C $i pull
  done
}

function cons-web {
  if [[ $# -ne 3 ]]; then
    echo "usage: cons-web <url> <start-num> <last-num>"
    echo "       open the consecutive web pages"
    return 0
  fi

  for i in {$2..$3}; do
    opera-beta $1"$i"
  done
}

function host-list {
  sudo nmap -sP 192.168.1.1/24 | sed -e "s/^\(MAC.*\)$/\1 \n/"
}

function samp {
  if [[ $#  -eq 0 ]]; then
    echo "usage: samp TYPE" >&2
    return 1
  fi

  type=$1
  shift

  if [[ $# -eq 0 ]]; then
    file="/tmp/my_samp_.$type"
  else
    name=$1
    file="$PWD/$name.$type"
  fi

  cp $HOME/Templates/pg/$type.$type $file
  vi $file
}

function dump {
  if [[ $# -eq 0 ]]; then
    echo "usage: dump BIN [FUNC] [FILE]" >&2
    return 1
  fi
  objdump -M intel -S "$1" | block "<.?${2:-main}.:" "^\n" | sed "/^$/d" | tee ${3:-${1%%.*}}.disa
}

#rubyとかで作りなおしたほうがいいかも
#マッチした部分のon/off
#特定ディレクトリの無視、検索条件指定
#errorの表示 on/off
function findstr { # {{{
  if [ $# -lt 2 ];then
    echo "missing argument" 1>&2
    return 1
  fi

  local location=$1
  shift

  while [ $# -gt 1 ]; do
    local opt="$opt $1"
    shift
  done

  local str=$1

  echo "location: $location"
  echo "opt: $opt"
  echo "str: $str"

  find $location $opt -type f -exec grep -IHl "$str" {} \; 2> /dev/null
} # }}}
