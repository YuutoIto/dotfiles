#!/usr/bin/env zsh -eu

getuuid(){ ruby -r securerandom -e 'print SecureRandom.uuid' }
gettty(){ echo "$TTY" | sed -e 's/[^0-9]//g' }
relative(){ echo ${1:a} | sed -e "s|^$PWD/\?||" }
warn(){ echo $* >&2 }
is_num(){ expr "${1}" + 1 >&! /dev/null }

back() {
  nohup $@ >&! /dev/null <&- &
  disown
}

export AUTOLS_DIR="$PWD"
autols(){
  [[ -n $AUTOLS_DIR && $AUTOLS_DIR != $PWD ]] && ls --color=always
  AUTOLS_DIR="$PWD"
}

ch(){ cd $HOME/${1:-} }

mkd(){
  mkdir $@
  cd "${@:$#}"
}

rmd(){
  if [[ $# -eq 0 ]]; then
    warn "usage: ermdir <DIR> erase empty directories"
    return 1
  fi

  rmdir -p $1/**/ 2> /dev/null
}

vboxresize(){ VBoxManage modifymedium --resize $((1024*$1)) $2 }
title()  { echo -ne "\033]0;$1\007" }
binfo()  { which -aps $1 && $1 --version }
help()   { $1 --help 2>&1 | less }
edigo()  { vi "$1" && $2 "$1" }
xopen()  { xdg-open "${1:-.}" >/dev/null 2>&1 }
dotgit() { git -C ~/.dotfiles ${@:-sh} }
vimgit() { git -C ~/.vim ${@:-sh} }
+r(){ chmod u+r $@ }
-r(){ chmod a-r $@ }
+w(){ chmod u+w $@ }
-w(){ chmod a-w $@ }
+x(){ chmod u+x $@ }
-x(){ chmod a-x $@ }

#color {{{
colorso(){
  local c
  echo
  for c in {000..255}; do
    echo -n "\e[38;5;${c}m $c"
    [ $(($c%16)) -eq 15 ] && echo
  done
  echo
}

colorsv(){
  local c
  echo
  for c in {016..255}; do
    echo -n "\e[38;5;${c}m $c"
    [ $(($((c-16))%6)) -eq 5 ] && echo
  done
  echo
}
# }}}

#link# {{{
sln(){
  if (($# < 2)); then
    warn "usage: sln <source> <target>"
    return 1
  else
    ln -svi ${1:a} ${2:a}
  fi
}

binln(){
  local name
  [[ ! -d $HOME/bin ]] && mkdir $HOME/bin
  for name in $@; do
    ln -svi "${name:a}" "$HOME/bin/${name:t:r}"
  done
}
# }}}

#rc commands {{{
generic_rc(){
  set -ue
  local dir="$1"
  shift

  if [[ $# -eq 0 ]]; then
    $EDITOR $dir
    return $?
  fi

  case $1 in
    '-c') cd "$dir" ;;
    '-d') echo "$dir" ;;
    '-l') ls "$dir" ;;
    '-g')
      shift
      git -C "$dir" ${@:-sh}
      ;;
    * )
      if [[ -e $dir/$1 ]]; then
        $EDITOR $dir/$1
      else
        warn "$1 is not exists"
      fi
  esac
}

vimrc(){ generic_rc $HOME/.vim/ $@ }
zshrc(){ generic_rc $ZSH_DOT_DIR $@ }
# }}}

pull-these(){
  local i
  for i in */; do
    printf "%-20s" "${i}"
    git -C "${i}" pull
  done
}

cons-web(){
  if [[ $# -ne 3 ]]; then
    warn "usage: cons-web <url> <start-num> <last-num>"
    warn "       open the consecutive web pages"
    return 1
  fi

  local i
  for i in ({$2..$3}) opera-beta "$1$i"
}

host-list(){
  sudo nmap -sP 192.168.1.1/24 | sed -e "s/^\(MAC.*\)$/\1 \n/"
}

dump(){
  if [[ $# -eq 0 ]]; then
    echo "usage: dump BIN [SYMBOL] [OUTPUT_FILE]" >&2
    return 1
  fi
  objdump -M intel -S "$1" | block "<.?${2:-main}.:" "^\n" | sed "/^$/d" | tee ${3:-${1%%.*}}.disa
}

# 再帰的にディレクトリのみパーミッションを変更する
dhmod(){
  ls -F | grep "/" | xargs chmod -R $@
}

#findstr # {{{
#TODO: remake.
#rubyとかで作りなおしたほうがいいかも
#マッチした部分のon/off
#特定ディレクトリの無視、検索条件指定
#errorの表示 on/off
findstr(){
  if [ $# -lt 1 ]; then
    echo "findstr [DIR] [OPTS] STR" 1>&2
    return 1
  fi

  local location str opt

  if [[ $# -eq 1 ]]; then
    location="."
  else
    location=$1
    shift
  fi

  while [ $# -gt 1 ]; do
    opt="$opt $1"
    shift
  done

  str=$1

  # echo "location: $location"
  # echo "opt: $opt"
  # echo "str: $str"

  find $location $opt -type f -exec grep -IHl "$str" {} \; 2> /dev/null
}
# }}}

#ud # {{{
ud(){ cdd ".${1:?}" }
ud-add(){
  [[ $UID -ne 0 && $PWD != $HOME ]] && cdd add ".$(gettty)"
}
# }}}

#percol # {{{
pc(){
  if [[ $# -eq 0 ]]; then
    warn "usage: pc command"
    return 1
  fi
  print -z $(eval $* 2>/dev/null | percol)
}

pa(){
  result=$(find ${@:-.} 2>/dev/null | percol)
  [[ -z $result ]] && return
  if [[ -d $result ]]; then
    cd "${result}"
  else
    cd "${result:h}"
  fi
}

pd(){ pa "$1" -type d }
pf(){ pa "$1" -type f }
# }}}

google_translate(){
  local arg en_jp opt

  arg=$(echo ${@} | sed -e 's/  */+/g')
  en_jp="?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8" # url
  opt="${en_jp}&text=${arg}"
  w3m "http://translate.google.com/${opt}" | block '\[\s+\]' '\[\s+\]' | tail --lines=+2
}

pk(){
  set -u
  out=$(pgrep "${1:?}")
  [[ -z $out ]] && return 1

  echo "$out"
  echo 'kill? (y/N)'
  read -ks key
  [[ ! $key =~ [yY] ]] && return 0

  echo 'kill: '
  pkill -c "${1:?}"
}

# improved tree
uree() {
  local s
  local -a opt
  for s in $@; do
    is_num "${s}" && opt+='-L'
    opt+="${s}"
  done
  command tree -C -l ${opt} | less -i --RAW-CONTROL-CHARS --LONG-PROMPT --chop-long-lines --quit-if-one-screen --no-init
}

enc-utf8(){
  output=$(mktemp)
  for s in $@; do
    nkf -Lu --utf8 "${s}" >! "${output}"
    mv "${output}" "${s}"
  done
}

sizes() {
  dir="${1:+$(relative $1)/}"
  ls -A "${dir:-./}" | sed "s|^|${dir}|g" | xargs -I{} du -sm '{}' 2>/dev/null | sort -n
}

rmhere() {
  if [[ -n $(ls -A) ]]; then
    warn "Here directory is not empty."
    return 1
  fi

  local dir="${PWD}"
  cd ..
  rmdir "${dir}"
}

