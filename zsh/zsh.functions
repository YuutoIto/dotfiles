#!/usr/bin/env zsh -ue

# カレントシェルの環境変数を変更するものなど
autoload -Uz proxy-on
autoload -Uz proxy-off

# cd to package directory with peco
autoload -Uz dein-cd
autoload -Uz cargo-cd
autoload -Uz gem-cd

autoload -Uz ruby-calc
autoload -Uz enc-utf8
autoload -Uz enc264
autoload -Uz sticky-enable-gnome
autoload -Uz generic_rc
autoload -Uz cons-web
autoload -Uz pull-these
autoload -Uz countup
autoload -Uz countdown
autoload -Uz colorso
autoload -Uz colorsv
autoload -Uz google_translate
autoload -Uz google
autoload -Uz rmhere
autoload -Uz sym_solve
autoload -Uz list_dirs_files
autoload -Uz filter_select_file
autoload -Uz filter_select_file_travel

is_num(){ expr "${1}" + 1 >&! /dev/null }
is_elf(){ file ${1} | awk '$0=$2' | grep -q ELF }
is_active(){ systemctl status "${1:?service}" | grep -Po '(?<=Active:).*' | grep -wq 'active' }
in_group(){ groups "${USER}" | grep -q "${1:?group name}" }

rand() { ruby -e "puts Random.new.rand(${1:? range})" }
getuuid(){ ruby -r securerandom -e 'print SecureRandom.uuid' }
gettty(){ echo "$TTY" | sed -e 's/[^0-9]//g' }
relative(){
  if (($# != 0)); then
    realpath --relative-to="./" "${1:a}"
  else
    while read line; do
      relative "${line}"
    done
  fi
}
warn(){ echo $* >&2 }
back(){ eval $@ >&! /dev/null <&- &! } # nohup?

hide(){
  out=$(mktemp --suffix=".$(date +%T).${1}.out")
  err=$(mktemp --suffix=".$(date +%T).${1}.err")

  { eval $@ > "${out}"  2> "${err}" <&-
    cat "${out}"
    cat "${err}" >&2
  } &!
}

notify_result(){
  result=${?}
  success_msg="${1:? success message}"
  failed_msg="${2:-failed: ${success_msg}}"

  # integer
  if ((${result} == 0)); then
    notify 'Result' "${success_msg}"
  else
    notify 'Result' "${failed_msg}"
  fi
}

line(){
  h="${1:?head}"
  t="${2:?tail}"
  cat - | head "-${h}" | tail "-${t}"
}

echo-color(){
  color="${1}"
  shift
  echo -e "\e[38;5;${color}m${*}\e[00m"
}

echo-true(){
  red="${1}"
  green="${2}"
  blue="${3}"
  shift 3
  echo -e "\x1b[38;2;${red};${green};${blue}m${*}\x1b[0m"
}

keymaps() { awk '/\/\*\s*Keymap/,/\*\//' ~qmkmy/keymap.c | sed -E 's|^\s*/?\*/?\s?||' }
timer-alert() { command termdown ${@} && sound-alert }

autols(){
  [[ ${AUTOLS_DIR:-$PWD} != $PWD ]] && ls -F --color=always -v
  AUTOLS_DIR="${PWD}"
}
add-zsh-hook precmd autols

ch(){ cd $HOME/${1:-} }

sln(){
  if (($# < 2)); then
    echo "usage: sln <source> <target>" >&2
    return 1
  else
    ln -svi ${1:a} ${2:a}
  fi
}

dotln(){
  mkdir -p $HOME/bin
  for name in $@; do
    ln -svin "${name:a}" "$HOME/.${name:t}"
  done
}

binln(){
  mkdir -p $HOME/bin
  for name in $@; do
    ln -svin "${name:a}" "$HOME/bin/${name:t:r}"
  done
}

# for completion
startvm(){
  back VBoxManage startvm ${@}
}

mkd(){
  mkdir -p "${*}"
  cd "${*}"
}

alias mkd='noglob mkd'

rmd(){
  if [[ $# -eq 0 ]]; then
    warn "usage: ermdir <DIR> erase empty directories"
    return 1
  fi

  find ${@} -type d -empty | xargs -I{} rmdir --ignore-fail-on-non-empty -p "{}"
}

hat(){
  for i in ${@}; do
    pygmentize -O style=native -f terminal256 -g "${i}" 2>/dev/null || command cat "${i}"
  done
}

cats(){
  for i in ${@}; do
    echo "---- ${i}"
    hat "${i}"
    echo
  done
}

open(){
  for i in ${@:-.}; do
    if [[ ! -e ${i:-.} ]]; then
      warn "${i:-.} is not exists"
      return 1
    fi
    xdg-open ${i:-.} >/dev/null 2>&1
  done
}

vboxresize(){ VBoxManage modifymedium --resize $((1024*$1)) $2 }
title()  { echo -ne "\033]0;$1\007" }
binfo()  { which -aps $1 && $1 --version }
help()   { $1 --help 2>&1 | less }
edigo()  { $EDITOR "$1" && $2 "$1" }
lls()    { ls -lgG --color=always  ${@-} | awk '{print $7, $8, $9}' }
dotgit() { git -C $DOT_DIR ${@:-sh} }
vimgit() { git -C ~/.vim ${@:-sh} }
md5text(){ echo -n "${1}" | md5sum | cut -f1 | cut -d \  -f 1 }
youtube-mp3() { youtube-dl -x --audio-format mp3 "${@:-$(clip -o)}" }
youtube-ogg() { youtube-dl -x --audio-format vorbis "${@:-$(clip -o)}" }
youtube-opus() { youtube-dl -x --audio-format opus "${@:-$(clip -o)}" }
setuid(){ sudo chown root: "${1}" && sudo chmod u+s "${1}" }
mve(){ mv "${1}" "${1:r}.${2}" }

+r(){ chmod u+r $@ }
-r(){ chmod a-r $@ }
+w(){ chmod u+w $@ }
-w(){ chmod a-w $@ }
+x(){ chmod u+x $@ }
-x(){ chmod a-x $@ }

vimrc(){ generic_rc $HOME/.vim/ $@ }
zshrc(){ generic_rc $ZSH_DOT_DIR $@ }

tmp(){
  new_tmp_filename="${1:? tmp filename}"
  ${EDITOR} "${HOME}/${new_tmp_filename}"
}

sgrep(){
  setopt dotglob # Need localloopts
  grep --color=auto --line-number ${@} **/* 2>/dev/null
}

git-set-pushurl(){
  git config remote.origin.pushurl "$(git config remote.origin.url)"
  git config remote.origin.url "$(git config remote.origin.url | tr ':' '/' | sed -e 's|^git@|https://|')"
}

git-hash(){
  branch="$(git branch | peco --select-1 | awk '$0=$NF')"
  [[ -z $branch ]] && return
  git log --oneline --decorate=short "${branch}" | peco | awk '$0=$1' | tr '\n' ' '
}

gpush(){
  echo 'pushing...'
  back git push ';' notify_result "'git pushed ${PWD:t}'"
}

gpull(){
  echo 'pulling...'
  back git pull ';' notify_result "'git pulled ${PWD:t}'"
}

v.mod() {
  file=$(git-modified-files-rel | peco --select-1 --on-cancel=error)

  if [[ -s $file ]]; then
    "${EDITOR}" "${file}"
  fi
}

hosts(){
  # -sn -sP
  nmap -sn "${1:-$(ip-sub | head -1)}" | sed -e "s/^\(MAC.*\)$/\1\n/"
}

dump(){
  if [[ $# -eq 0 ]]; then
    echo "usage: dump BIN [SYMBOL] [OUTPUT_FILE]" >&2
    return 1
  fi
  objdump -M intel -S "$1" | block "<.?${2:-main}.:" "^\n" | sed "/^$/d" | tee ${3:-${1%%.*}}.disa
}

# 再帰的にディレクトリのみパーミッションを変更する
dhmod(){
  ls -F | grep "/" | xargs chmod -R $@
}

# peco cd # {{{
pc(){
  if [[ $# -eq 0 ]]; then
    warn "usage: pc command"
    return 1
  fi
  print -z $(eval $* 2>/dev/null | peco)
}

pa(){
  result=$(find ${@:-.} 2>/dev/null | peco)
  [[ -z $result ]] && return
  if [[ -d $result ]]; then
    cd "${result}"
  else
    cd "${result:h}"
  fi
}

pd(){ pa "$1" -type d }
# cd to file dir
pf(){ pa "$1" -type f }
# }}}

# improved tree
uree(){
  local s
  local -a opt
  for s in $@; do
    is_num "${s}" && opt+='-L'
    opt+="${s}"
  done
  command tree -C -l ${opt} | less -i --RAW-CONTROL-CHARS --LONG-PROMPT --chop-long-lines --quit-if-one-screen --no-init
}

sizes(){
  dir="${1:+$(relative $1)/}"
  ls -A "${dir:-./}" | sed "s|^|${dir}|g" | xargs -I{} du -sm '{}' 2>/dev/null | sort -n
}

lsize(){
  du -sh -- "${*:+$(relative $*)/}"*
}

# pgrep(){
#   command pgrep "${*}" | xargs --no-run-if-empty ps -p
# }

kill(){
  if (($# != 0)); then
    command kill --verbose $@
  else
    ps --no-headers -u "${USER}" -o pid,cmd | peco | awk '$0=$1' | xargs kill -KILL --verbose
  fi
}

pgkill() {
  pattern="${1:? process grep name}"
  pgrep -ila "${pattern}"

  if (($? != 0)); then
    warn 'not matched'
    return
  fi

  if read -q '?pkill -9 (y/N) '; then
    pkill -9 "${pattern}"
    pgrep -ila "${pattern}"
    return 0
  fi
}

mac-vendor(){
  # TODO: /usr/share/nmap/nmap-mac-prefixes
  if (($# != 0)); then
    curl -L -sS http://api.macvendors.com/$(echo "${1:?Need mac address}" | sed -s 's/..:..:..$/00:00:00/g')
    echo
  else
    while read line; do
      mac-vendor "${line:?Need mac address}"
    done
  fi
}

mac-arp(){
  arp -n | awk '/:/{printf("%-15s %s\n", $1, $3)}' | while read line
  do
    echo -n "${line}   "
    mac-vendor "$(echo "${line}" | awk '$0=$2')"
  done
}

google-asm(){
  back google "${1:?opecode}" site:softwaretechnique.jp
}

gdb-disas(){
  gdb -q --nx --batch --init-eval-command='set disassembly-flavor intel' --eval-command="disas ${2:-main}" "${1:-a.out}"
}

gots(){
  readelf -r "${1:?ELF binary}" | egrep '^[0-9]' | sort -n | sed -e 's/@.*$//' -e 's/__\+//g' | awk '$0=$5 " = 0x" $1'
}

# trash # {{{

# Verify write permission.
# Ignore directory.
trash-safe-file(){
  if [[ -d ${name} ]]; then
    warn "cannot remove '${name}': Is a directory"
    return 0
  elif [[ -w ${1} ]]; then
    echo -n "remove write-protected file ${1}? " >&2
    if ! $(read -q); then
      return 0
    fi
  fi
  trash "${1}"
}

# ディレクトリが内包する全てのファイルの削除判定をしてまとめて消す
trash-safe-dir(){
  echo-color 31 'trash: write protected files'
  find "${1}" -type f -not -writable E
  echo-color 31 'trash: write protected dirs'
  find "${1}" -type d -not -readable -or -type d -not -writable -or -type d -not -executable E
  echo

  if $(read -q "?Remove ${1} including these files? "); then
    trash "${1}"
    echo -e '\nRemoved!'
  else
    echo
  fi
}

trash-elf(){
  for i (*); do
    is_elf "${i}" &&  trash "${i}"
  done
}
# }}}

pacman-mirrorsort(){
  sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.cp
  sudo rankmirrors -f 6
}

lsmod(){
  if (($# == 0)); then
    command lsmod
  else
    command lsmod | grep -E "${*}"
  fi
}

sl(){
  trap '' 1 2 3 15
  sleep 1.0
  echo 'l「もしかして」'
  sleep 1.5
  echo 's「私たち」'
  sleep 1.5
  echo '「「入れ替わってる〜！？」」'
  sleep 1.5
}

test-build(){
  : "${1:? source file}"
  "${CMD}" -O0 -m32 -fno-stack-protector -o "${1%.*}" "${1}"
}

gccs(){
  export CMD=gcc
  test-build ${@}
}

clangs(){
  export CMD=clang
  test-build ${@}
}

elf-sec(){
  objdump -d -j ."${2:-init}" --no "${1:-a.out}"
}

fork-server(){
  # 引数の順序依存
  socat "TCP-LISTEN:${2:?port},reuseaddr,fork" "EXEC:${${1:a}:?file}" &
}

doko(){
  find ${2:-} -iname "*${1}*"
}

aslr(){
  sudo sysctl -w kernel.randomize_va_space=${1:-2}
}

ptrace(){
  sudo sysctl -w kernel.yama.ptrace_scope=${1:-2}
}

exzip(){
  for i in ${@}; do
    unzip -d "${i:r}" "${i}"
  done
}

wgetc(){
  clip -o
  echo
  if (($# == 0)); then
    wget "$(clip -o)"
  else
    wget -O "${1:?filename}" "$(clip -o)"
  fi
}

gif-optimize(){
  convert "${1:?gif path}" -fuzz 7% -layers Optimize "${1:r}.opt.gif"
}

json_format(){
  tmpfile=`mktemp`
  cat "${1:?JSON file}" | jq . > "${tmpfile}"
  command mv "${tmpfile}" "${1}"
}

smart_docker(){
  unfunction "${1}"

  if ! can_exec systemctl ; then
    return
  fi

  if ! is_active docker.service; then
    echo 'Start docker'
    sudo systemctl start docker.service
  fi

  if ! in_group docker; then
    alias "${1}"="sudo ${1}"
  fi
}

docker(){
  smart_docker docker
  docker ${@}
}

docker-compose(){
  smart_docker docker-compose
  docker-compose ${@}
}

docker-images-update(){
  sudo docker images | awk 'NR>1 && $0=$1' | sort -u | egrep -v '^(<none>)$' | xargs -P0 -L1 -I@ sudo docker pull @
}

dkp-select() {
  docker ps ${@} | tail --lines=+2 | peco | awk '$0=$1'
  # --format='table {{.ID}}\t{{.src_image_hash}}\t{{.Names}}'
}


dkc-rm() {
  docker-compose stop -t1 ${@}
  docker-compose rm -f ${@}
}

sec(){
  : "${1:?binary file}"

  file "${1}" | tr ',' '\n'
  echo
  checksec -f "${1}" | awk 'NR==2{$20="";print}'
  echo
  readelf -h "${1}"
  readelf -r "${1}"
}

ps_get(){
  ps --no-headers -o "${1:?format}" -p "${2:?pid}"
}

ps_stime(){
  ps_get stime "${1:?pid}"
}

ps_time(){
  ps_get time "${1:?pid}"
}

winfocus(){
  : "${1:?app name}"
  eval "$(xdotool search --shell --onlyvisible --class "${1}")"

  if (($#WINDOWS == 0)); then
    warn 'Not found'
    return 1
  fi

  # only older
  win_num="$(for i in ${WINDOWS}; do
    ps_time "$(xdotool getwindowpid "${i}")" | tr '\n' ' '
    echo "${i}"
  done | sort -nr | head -1 | awk '$0=$2')"

  xdotool windowactivate "${win_num}"
}

typeset -g -a my_precmd_funcs
tmp_precmd(){
  if (($# == 0)); then
    echo "${my_precmd_funcs}" | tr ' ' '\n'
    return 0
  fi

  if [[ "${1}" == '-d' ]]; then
    shift
    # TODO
    return 0
  fi

  my_precmd_funcs+="${1}"
}

exec_my_precmd(){
  for cmd in ${my_precmd_funcs}; do
    eval "${cmd}"
  done
}
add-zsh-hook precmd exec_my_precmd

vim-version(){ # {{{
  install_dir="${HOME}/works/vim-versions"
  if (($# == 0)); then
    ls "${install_dir}"
    return 0
  fi
  version="${1}"
  dir="${install_dir}/${version}"

  if ! [[ -d $dir ]]; then
    cd ~/src/vim
    gch "v${version}"
    make distclean >&! /dev/null
    make "-j $(nproc --ignore 1)"
    ./configure --prefix="${dir}"
    make && make install
    make distclean >&! /dev/null
    git ch -
    cd -
  fi

  export PATH="${dir}/bin:$PATH"
  echo "${dir}/bin"
} # }}}

vim-wl(){
  cat $(git ls-files | grep -Ev 'colors/|snippets/|neobundle.vim') | grep -Ev '^\s*("|$)' | wc -l
}

office2pdf(){
  libreoffice --headless --invisible --convert-to pdf ${*:?Source files}
}

show(){
  db=${1:?db}
  table=${2:?table}
  echo "select * from ${table};" | sqlite3 "${db}"
}

httpd(){
  dir="${1:-.}"
  port="${2:-4000}"

  if in_path ruby; then
    ruby -run -e httpd "${dir}" -p "${port}"
  else
    (cd ../ && python3 -m http.server "${port}")
  fi
}

get-active-connections(){
  # iwgetid -r
  nmcli -t -f name connection show --active
}

gitkraken(){
  back command gitkraken --path="${1:-./}"
}

click(){
  startwait="${1:?start wait}"
  timespan="${2:?time span}"
  count="${3:?click count}"

  sleep "${startwait}"
  echo 'click start'

  for ((i=0; i < ${count}; i++)) ; do
    sleep "${timespan}"
    xdotool click 1
  done
}

add() {
  file="${1:?destination path}"
  str="${2:?append string}"
  echo "${str}" >> "${file}"
}

comet(){
  f="${1:?casl file}"
  pycasl2 "${f}"
  pycomet2 "${f:r}.com" -d -c
}

# docker-compose ictsc-score-server
idc(){
  cmd=${1:? back api}
  case "${cmd}" in
    'back')
      docker-compose up -d --no-deps redis plasma db
      [[ $? == 0 ]] && echo-color 45 'Start [redis plasma db ui] in background'
      ;;
    'up')
      docker-compose up api ui
      # sudo docker-compose up --build api
      ;;
  esac
}

unzip-recv() {
  broken_zip="${1:?broken zip}"
  tmp_zip="$(mktemp --suffix=.zip)"
  echo 'y' | zip --fixfix "${broken_zip}" --out="${tmp_zip}"
  unzip "${tmp_zip}"
}

gotty-term(){
  gotty -w tmux attach -t gotty >&! /dev/null <&- &
  IGNOREEOF=1 tmux new -E -s gotty
  pkill gotty
}

# vendor:product -> bus,num
prod2bus(){
  lsusb -d ${1:?Please vendor:product (e.g 03eb:2ff4)} | awk '{printf("%d,%d", $2, $4)}'
}

sourceenv(){
  envfile="${1:?env file}"
  shift
  is source "${envfile}" '&&' eval ${@}
}

save-cisco-config() {
  scp cisco-router:startup-config "./$(date +%F)--$(read -E).txt"
}


ssh-portbind() {
  if [[ $# -lt 2 ]]; then
    echo "<remote host> <port> [other args]"
    return 1
  fi

  remote_host="${1}"
  bind_port="${2}"
  shift 2

  ssh -f -N -L "${bind_port}:127.0.0.1:${bind_port}" "${remote_host}" ${@}

  # listen_port="${1:? local listen port}"
  # target_host="${2:? target host from footstool}"
  # target_port="${3:? target port}"
  # footstool_host="${4:? footstool host}"
  # shift 4
  # ssh -f -N -L "${listen_port}:${target_host}:${target_port}" "${footstool_host}" ${@}
}

textimg(){
  text="${1:-$(read -E)}"
  out="textimg-${text}.png"
  fsize=64
  font='/usr/share/fonts/TTF/DejaVuSansMono.ttf'
  convert -background white -fill black -font "${font}" -pointsize "${fsize}" label:"${text}" "${out}"
}

show-vm-port(){
  vboxmanage list vms | grep -oP '(?<=").*(?=")' | xargs -I {} vboxmanage showvminfo --machinereadable {} | grep -e '^name' -e '^Forwarding'
}

binskip(){
  IN="${1:?}"
  OUT="${2:?}"

  SKIP="${3:?}"

  dd if="${IN}" of="${OUT}" bs=1 skip="${SKIP}"
}

filter_exists_dir(){
  while read dir; do
    [[ -d $dir ]] && echo "${dir}"
  done
}

scp-config(){
  hostname="${1:? hostname}"
  title="${2:? title}"
  scp "${hostname}":startup-config "./${hostname}--$(date +%F)--${2}.txt"
}

build-qmk() {
  name=${1:? keyboard name}
  cd ~qmk

  case "${name}" in
    moonlander)
      qmk compile -kb moonlander -km uplus
      qmk flash -kb moonlander -km uplus
      ;;
    ergodox_ez)
      make ergodox_ez:uplus:teensy
      ;;
    preonic)
      make preonic/rev2:uplus:dfu
      ;;
    helix)
      qmk compile -kb helix -km uplus
      qmk flash -kb helix -km uplus
      ;;
    ergodash)
      make ergodash/rev1:uplus:avrdude
      ;;
  esac

  cd -
}

socks() {
  port="${1:? port}"
  user_host="${2:? user@host}"
  ssh -TND "${port}" "${user_host}"
}

backup(){
  target="${1:? backup target file path}"
  filename="${1:t}"
  backup_dir="${1:h}/.backup"
  mkdir -p "${backup_dir}"
  backup_file="${backup_dir}/${filename}--$(date +%F--%H:%M)"

  cp "${target}" "${backup_file}"

  if (($? == 0)); then
    echo "saved to ${backup_file}"
  fi
}

rm-deadlinks(){
  find "${dir:-./}" -xtype l | xargs rm
}

wifi-status() {
  device=${1:? device}
  iw "${1}" station dump
}

wifi-scan() {
  watch --color --no-title nmcli --colors=y device wifi list
}

default-route() {
  mode="${1:?mode add, delete or change}"
  shift

  case "${mode}" in
    add) sudo ip route add default via "${1:? default gateway address}" dev "${2:? device}" ;;
    change) sudo ip route change default via ${1:? default gateway address} dev "${2:-$(default-dev)}" ;;
    delete) sudo ip route delete default ;;
  esac
}

os-console() {
  xdg-open $(os console url show -c url -f value ${1:? server name})
}

wis(){
  tempfile="$(mktemp)"
  while :; do
    eval "$@" > "${tempfile}"
    clear
    cat "${tempfile}"
    sleep 1
  done
}

endless() {
  while :; do
    eval "${*}"
    sleep 0.5
  done
}

endless-read() {
  while :; do
    echo "---- executing: $(date-now) ----"
    echo "${*}"
    eval "${*}"
    read
  done
}

ping-mtu() {
  ping -M do -s "${2:?MTU size}" -c 2 "${1:?host or ip}"
}

cdr-cleanup() {
  old_path="${CHPWD_DIR}-old"

  cp -f "${CHPWD_DIR}" "${old_path}"
  cat "${old_path}" \
    | sed -E 's/^..|.$//g' \
    | filter_exists_dir \
    | sed -e "s/^/\$'/" -e "s/\$/'/" \
    > "${CHPWD_DIR}"
}

pdf-remove-head() {
  cat_to="${1:?cat to N from head}"
  new_prefix="${2:-cat}"
  filename="${3:-filename}"

  pdftk "${filename}" cat "${cat_to}-end" output "${new_prefix}-${filename}"
}

# -() {
# }
#
# +() {
# }

# TODO

tops(){
  return

  top
  htop
  nethogs
  iftop
  iotop
  atop      アクティブなプロセスのみ?
  slabtop   メモリ
  jnettop   ホストとポートごとに表示
  s-tui     電源
}

stats(){
  return

  # https://blog.riywo.com/2011/02/20/192123/
  ifstat
  netstat -taopn
  vmstat
  iostat -x
  dstat -f
  mpstat
}

enable_network_share(){
# sysctl net.ipv4.ip_forward=1
# iptables -t nat -A POSTROUTING -o internet0 -j MASQUERADE
# iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# iptables -A FORWARD -i net0 -o internet0 -j ACCEPT
}

# end TODO
