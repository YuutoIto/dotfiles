#!/usr/bin/env zsh -eu

getuuid(){ ruby -r securerandom -e 'print SecureRandom.uuid' }
gettty(){ echo "$TTY" | sed -e 's/[^0-9]//g' }
relative(){ echo ${1:a} | sed -e "s|^$PWD/\?||" }

export AUTOLS_DIR=$PWD
autols(){
  [[ -n $AUTOLS_DIR && $AUTOLS_DIR != $PWD ]] && ls --color=always
  AUTOLS_DIR=$PWD
}

ch(){ cd $HOME/${1:-} }

mcdir(){
  mkdir $@
  cd "${@:$#}"
}

ermdir(){
  if [[ $# -ne 1 ]]; then
    echo "usage: ermdir DIR    erase empty directories" >&2
    return 1
  fi

  rmdir -p $1/**/ 2> /dev/null
}

dcho()   { eval "echo \$$1" }
sizes()  { du -sm ./$1/* | sort -nr }
binfo()  { where $1 && $1 --version }
help()   { $1 --help 2>&1 | less -SRn }
edigo()  { vi $1 && $2 $1 }
lddw()   { ldd $(which $1) }
dotgit() { git -C ~/.dotfiles ${1:-sh} }
vimgit() { git -C ~/.vim ${1:-sh} }
+r(){ chmod +r $1 }
-r(){ chmod -r $1 }
+w(){ chmod +w $1 }
-w(){ chmod -w $1 }
+x(){ chmod +x $1 }
-x(){ chmod -x $1 }

#color {{{
colors(){
  local c
  echo
  for c in {000..255}; do
    echo -n "\e[38;5;${c}m $c"
    [ $(($c%16)) -eq 15 ] && echo
  done
  echo
}

colorsv(){
  local c
  echo
  for c in {016..255}; do
    echo -n "\e[38;5;${c}m $c"
    [ $(($((c-16))%6)) -eq 5 ] && echo
  done
  echo
}
# }}}

#link# {{{
sln(){
  local sour targ
  if [[ $# < 2 ]]; then
    echo "usage: sln <source> <target>"
    return 1
  else
    sour=${1:a}
    targ=${2:a}
    ln -svi $sour $targ
  fi
}

binln(){
  for name in $@; do
    ln -svi ${name:a} $HOME/bin/${name:t:r}
  done
}
# }}}

#rc commands {{{
generic_rc(){
  set -u
  : $1
  local dir="$1"
  shift
  case $# in
    0) vi $dir ;;
    *)
      case $1 in
        '-d' | '--dir' )  echo $dir ;;
        '-l' | '--list' ) ls $dir ;;
        '-c' | '--cd' )   cd $dir ;;
        '-g' | '--git' )
          shift
          if [[ $# -eq 0 ]]; then
            git -C $dir sh
          else
            git -C $dir $@
          fi
          ;;
        * )
          if [ -e $dir/$1 ]; then
            vim $dir/$1
          else
            echo "$1 is not exists" >&2
          fi
      esac
      ;;
  esac
}

vimrc(){
  generic_rc $HOME/.vim/ $@
}

zshrc(){
  generic_rc $HOME/.dotfiles/zsh/ $@
}
# }}}


pull-these(){
  for i in `ls -F | grep '/$'`; do
    printf "%-20s" $i
    git -C $i pull
  done
}

cons-web(){
  if [[ $# -ne 3 ]]; then
    echo "usage: cons-web <url> <start-num> <last-num>"
    echo "       open the consecutive web pages"
    return 0
  fi

  for i in {$2..$3}; do
    opera-beta $1"$i"
  done
}

host-list(){
  sudo nmap -sP 192.168.1.1/24 | sed -e "s/^\(MAC.*\)$/\1 \n/"
}

samp(){ # {{{
  if [[ $#  -eq 0 ]]; then
    echo "usage: samp TYPE [file]" >&2
    return 1
  fi

  local type file templates="$HOME/Templates/pg"

  if [[ $1 == '--types' || $1 == '-t' ]]; then
    ls $templates | grep -o '^[^.]*'
    return
  fi

  type=$1

  # ファイルとパスを設定
  if [[ $# -lt 2 ]]; then
    file=$(mktemp  --suffix=.${type})
  else
    file="$PWD/$2.$type"

    if [[ -e $file ]]; then
      echo "$file already"
      return 1
    fi
  fi

  cat "$templates/${type}.${type}" > $file

  if [[ $? != 0 ]]; then
    echo "Error: $file is not writable"
    return 1
  fi

  vim + $file
} # }}}

dump(){
  if [[ $# -eq 0 ]]; then
    echo "usage: dump BIN [SYMBOL] [OUTPUT_FILE]" >&2
    return 1
  fi
  objdump -M intel -S "$1" | block "<.?${2:-main}.:" "^\n" | sed "/^$/d" | tee ${3:-${1%%.*}}.disa
}

# 再帰的にディレクトリのみパーミッションを変更する
dhmod(){
  ls -F | grep "/" | xargs chmod -R $1
}

#rubyとかで作りなおしたほうがいいかも
#マッチした部分のon/off
#特定ディレクトリの無視、検索条件指定
#errorの表示 on/off
findstr(){ # {{{
  if [ $# -lt 1 ];then
    echo "findstr [DIR] [OPTS] STR" 1>&2
    return 1
  fi

  local location str opt

  if [[ $# == 1 ]];then
    location="."
  else
    location=$1
    shift
  fi

  while [ $# -gt 1 ]; do
    opt="$opt $1"
    shift
  done

  str=$1

  # echo "location: $location"
  # echo "opt: $opt"
  # echo "str: $str"

  find $location $opt -type f -exec grep -IHl "$str" {} \; 2> /dev/null
} # }}}

#udd # {{{
udd-add(){
  [[ $USER == 'root' || $PWD == $HOME ]] && return
  cdd add "t$(gettty)"
}

udd-delete(){
  [[ $USER == 'root' ]] && return
  cdd delete "t$(gettty)" 2>/dev/null
}

udd(){
  if [[ $# == 0 ]]; then
    cat ~/.cdd
  else
    cdd "t$1"
  fi
}
# }}}

#percol # {{{
pc(){
  if [[ $# == 0 ]]; then
    echo "usage: pc [mode [target]] [command]"
    return 1
  fi

  case $1 in
    '-h'|'--history')
      cmd="history -nr -${2:-1000}" ;;
    '-f'|'--file')
      cmd="find ${2:-.} -type f" ;;
    '-d'|'--directory')
      cmd="find ${2:-.} -type d" ;;
    '-a'|'--all')
      cmd="find ${2:-.}" ;;
    *)
      cmd=$* ;;
  esac

  result=$(eval $cmd 2>/dev/null | percol)

  case $1 in
    '-h'|'--history')
      eval $result ;;
    '-f'|'--file')
      cd ${result:h} ;;
    '-d'|'--directory')
      cd ${result} ;;
    '-a'|'--all')
      if [[ -f $result ]]; then
        cd ${result:h}
      else
        cd ${result}
      fi
      ;;
    *)
      print -z $* ;;
  esac
}

pd(){ pc -d ${1:-} }
pf(){ pc -f ${1:-} }
ph(){ pc -h ${1:-} }
# }}}

google_translate(){
  local arg en_jp opt

  arg=`echo ${@} | sed -e 's/  */+/g'`
  en_jp="?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8" # url
  opt="${en_jp}&text=${arg}"
  w3m "http://translate.google.com/${opt}" | block '\[\s+\]' '\[\s+\]' | tail --lines=+2
}
