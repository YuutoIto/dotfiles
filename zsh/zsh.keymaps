# man zshzle
bindkey -e
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -r "^T"

# emacs bind
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^F" forward-char
bindkey "^B" backward-char
bindkey "^D" delete-char
bindkey "^H" backward-delete-char
bindkey "^W" backward-kill-word
bindkey "^K" kill-line
bindkey "^U" backward-kill-line
# bindkey "^N" down-line-or-history
# bindkey "^P" up-line-or-history
bindkey "^N" down-line-or-search
bindkey "^P" up-line-or-search

bindkey "^L" clear-screen
bindkey "^M" accept-line
bindkey "^J" accept-line
bindkey "^G" send-break
bindkey "^Q" push-line
bindkey "^V" quoted-insert

## Completion

# <S-Tab>
bindkey "[Z" reverse-menu-complete

bindkey "^]" insert-last-word
bindkey "^Z" zle_background

# \ -
bindkey "^_" undo # <c-x><c-u>
# bindkey "z" undo
# insert
bindkey "[2~" overwrite-mode
# delete
bindkey "[3~" delete-char
# backspace
bindkey "^?" backward-delete-char

bindkey "^XX" edit-command-line
bindkey "^X^X" edit-command-line

# cursor-key and other # {{{
bindkey "[A" up-line-or-search
bindkey "[B" down-line-or-search
bindkey "[C" forward-char
bindkey "[D" backward-char
bindkey "[H" beginning-of-line
bindkey "[F" end-of-line
bindkey "OA" up-line-or-search
bindkey "OB" down-line-or-search
bindkey "OC" forward-char
bindkey "OD" backward-char
bindkey "OH" beginning-of-line
bindkey "OF" end-of-line
# }}}

# alt-bind # {{{
bindkey "b" backward-word
bindkey "f" forward-word
bindkey "n" history-search-forward
bindkey "p" history-search-backward

bindkey "w" kill-word
bindkey "q" push-line
bindkey "h" run-help
# }}}

in_path peco && bindkey '' zle_filter_history
in_path peco && bindkey '' zle_filter_cdr

# Ctrl o
bindkey '' zle_filter_select_file

# Ctrl /
# bindkey '' zle_filter_open_file
# bindkey '' zle_filter_cd
bindkey '' zle_filter_open_file

bindkey 'gh' zle_git_hash
bindkey 'gh' zle_git_hash
bindkey 'gb' zle_git_branch
bindkey 'gb' zle_git_branch

bindkey 'm' zle_play_music
bindkey '' zle_play_music

bindkey 'c' zle_filter_commands
# bindkey '' zle_filter_commands # don't work

bindkey 'd' zle_filter_cd
# bindkey '' zle_filter_cd # don't work

# bindkey 'p' zle_pry
# bindkey '' zle_pry

bindkey 'y' zle_clip

## original keybind functions
get_buffer_current_word() { echo "${LBUFFER/* /}${RBUFFER/ */}" }

replace_buffer_current_word() {
  LBUF="$(echo ${LBUFFER} | sed "s/${LBUFFER/* /}\$//")"
  RBUF="$(echo ${RBUFFER} | sed "s/^${RBUFFER/ */}//")"
  BUFFER="${LBUF}${*}${RBUF}"
  CURSOR="$(expr length "${LBUF}${*}")"
}

zle_filter_history(){ # {{{
  zle reset-prompt
  local cmd="$(history -nr 0 | peco --query "${LBUFFER}")"

  if [[ -n $cmd ]]; then
    BUFFER="${cmd}"
    CURSOR=$#BUFFER
  fi
} # }}}
zle -N zle_filter_history

zle_filter_cdr(){ # {{{
  zle reset-prompt
  local dir="$(cdr -l | sed 's/^.....//' | peco --query "${LBUFFER}")"

  if [[ -n $dir ]]; then
    BUFFER=" cd ${dir}"
    zle accept-line
  fi
} # }}}
zle -N zle_filter_cdr

zle_filter_select_file(){ # {{{
  if [[ $HOME = $PWD ]]; then
    echo 'here is home directory'
    zle reset-prompt
    return
  fi

  zle reset-prompt

  local word="$(get_buffer_current_word)"

  local -a files
  filter_select_file ${word} | while read file; do
    files+="'${file}'"
  done

  if (($#files != 0)); then
    replace_buffer_current_word ${files}
  fi
} # }}}
zle -N zle_filter_select_file

zle_filter_open_file(){ # {{{
  if [[ $HOME = $PWD ]]; then
    echo 'here is home directory'
    zle reset-prompt
    return
  fi

  zle reset-prompt

  local -a files
  filter_select_file | while read file; do
    files+="'${file}'"
  done

  if (($#files != 0)); then
    BUFFER="${EDITOR} ${files}"
    CURSOR=${#BUFFER}
    zle accept-line
  fi
} # }}}
zle -N zle_filter_open_file

zle_git_hash(){ # {{{
  str="$(git-hash)"
  [[ -z $str ]] && return
  BUFFER="${BUFFER}$str"
  CURSOR=${#BUFFER}
} # }}}
zle -N zle_git_hash

zle_git_branch(){ # {{{
  str="$(git-branch)"
  [[ -z $str ]] && return
  BUFFER="${BUFFER}$str"
  CURSOR=${#BUFFER}
} # }}}
zle -N zle_git_branch

zle_play_music(){
  zle reset-prompt
  play-filter </dev/tty
}
zle -N zle_play_music

zle_filter_commands(){
  BUFFER="$(hash -L | awk -F'[= ]' '{print $2}' | peco)"
  CURSOR=${#BUFFER}
}
zle -N zle_filter_commands

zle_filter_cd(){ # {{{
  # BUFFER="cd $(pd_recursive)"
  BUFFER="cd $(filter_select_dir)"
  zle accept-line
} # }}}
zle -N zle_filter_cd

zle_pry(){
  BUFFER='pry'
  zle accept-line
}
zle -N zle_pry

zle_clip(){
  echo -nE "${BUFFER}" | clip
  notify Clipped "${BUFFER}"
}
zle -N zle_clip

zle_background(){
  BUFFER='bg && disown'
  zle accept-line
}
zle -N zle_background
